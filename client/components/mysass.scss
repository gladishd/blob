// For the dripping liquid:

// npm install node-sass
// npm install sass-loader sass webpack --save-dev
// https://github.com/sass/node-sass
//npm install --save-dev node-sass sass-loader style-loader css-loader mini-css-extract-plugin
// npm install vue-style-loader, css-loader, sass-loader, sass --save-dev, postcss-loader,
// npm uninstall postcss-loader --save-dev
// npm install postcss-loader@~3.0.0 --save-dev
// npm install autoprefixer

@import url('https://fonts.googleapis.com/css?family=Raleway:300,700,900');
@mixin leftPos($count) {
  @for $i from 1 through $count {
    &:nth-child(#{$i}) {
      left: ((($i)-2) * 13)-1%;
    }
  }
}

body {
  background: #5444c4;
  color: #fff;
  margin: 0;
  font-family: 'Raleway', sans-serif;
  text-align: center;
  letter-spacing: 0.08em;
}
b {
  font-size: 28px;
  color: #fff;
}
.container {
  width: 300px;
  height: 500px;
  margin: 15px auto;
  background: #6cd2ff;
  overflow: hidden;
  position: relative;
  box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);
}
.text {
  position: absolute;
  left: 50%;
  top: 45%;
  transform: translate(-50%, -50%);
  text-align: center;
  color: #6cd2ff;
  font-size: 64px;
  font-weight: 900;
}
.liquid {
  width: 120%;
  height: 10px;
  position: absolute;
  top: -2%;
  left: -10%;
  background: rgb(51, 255, 0);
  border-radius: 10%;
  animation: liquid 5s infinite;
}

.blobs {
  filter: url('#goo');
  width: 100%;
  height: 100%;
  position: relative;
}
.blob {
  width: 30px;
  height: 30px;
  margin: 0 5px 0px 0;
  background: #fff;
  border-radius: 50%;
  position: absolute;
  top: 0;
  @include leftPos(9);
  animation: drip_one 5s infinite;

  &:nth-of-type(4n-7) {
    width: 65px;
    animation: drip_four 5s infinite;
  }
  &:nth-of-type(3n-2) {
    width: 26px;
  }
  &:nth-of-type(2) {
    width: 22px;
  }
  &:nth-of-type(8) {
    animation: drip_five 5s infinite;
  }
  &:nth-of-type(4n + 2) {
    height: 56px;
    animation: drip_two 5s infinite;
  }
  &:nth-of-type(6n-2) {
    height: 42px;
    animation: drip_three 5s infinite;
  }
}

@keyframes drip_one {
  from {
    top: 0;
  }
  to {
    top: 103%;
  }
}
@keyframes drip_two {
  from {
    top: 0;
  }
  to {
    top: 104%;
  }
}
@keyframes drip_three {
  from {
    top: 0;
    height: 52px;
  }
  to {
    top: 102%;
    height: 132px;
  }
}
@keyframes drip_four {
  from {
    top: 0;
    width: 65px;
    height: 30px;
  }
  to {
    top: 102%;
    width: 75px;
    height: 45px;
  }
}
@keyframes drip_five {
  from {
    top: 0;
    height: 30px;
  }
  to {
    top: 102%;
    height: 72px;
  }
}
@keyframes liquid {
  from {
    height: 15px;
  }
  to {
    height: 109%;
  }
}

// for the gooey menu
// it turns out css3 is not really even needed.
@import '_css3';
// What is css3 even good for?
// @import url("compass");
// @import url('compass/css3.css');
// @import url('mathsass');
// @import url('math-helpers');
// @import 'mathsass';
// @import 'math-helpers';
/* sine */
/* power */
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  } @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}
/* factorial */
@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}
/* pi */
@function pi() {
  @return 3.1415926535897932384626433832795028841971694;
}
/* radian */
@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}
@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}
@function cos($angle) {
  @return sin((pi() / 2) - $angle);
}
//vars
$fg: #ff4081;
$bg: #3f51b5;
$pi: 3.14;

//config
$menu-items: 5;
$open-distance: 115px;
$opening-angle: $pi - 0.2;

body {
  background: $bg;
  color: white;
  text-align: center;
}
a {
  color: inherit;
}
h1,
h2,
h3,
h4 {
  margin: 0;
  margin-bottom: 10px;
  margin-top: 10px;
}
h1 {
  font-size: 3em;
}
%goo {
  filter: url('#shadowed-goo');
  // debug
  // background:rgba(255,0,0,0.2);
}
%ball {
  background: $fg;
  border-radius: 100%;
  width: 80px;
  height: 80px;
  margin-left: -40px;
  position: absolute;
  top: 20px;
  color: white;
  text-align: center;
  line-height: 80px;
  transform: translate3d(0, 0, 0);
  transition: transform ease-out 200ms;
}
.menu-open {
  display: none;
}
.menu-item {
  @extend %ball;
}
.hamburger {
  $width: 25px;
  $height: 3px;
  width: $width;
  height: $height;
  background: white;
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -$width/2;
  margin-top: -$height/2;
  transition: transform 200ms;
}
$hamburger-spacing: 8px;
.hamburger-1 {
  transform: translate3d(0, -$hamburger-spacing, 0);
}
.hamburger-2 {
  transform: translate3d(0, 0, 0);
}
.hamburger-3 {
  transform: translate3d(0, $hamburger-spacing, 0);
}
.menu-open:checked + .menu-open-button {
  .hamburger-1 {
    transform: translate3d(0, 0, 0) rotate(45deg);
  }
  .hamburger-2 {
    transform: translate3d(0, 0, 0) scale(0.1, 1);
  }
  .hamburger-3 {
    transform: translate3d(0, 0, 0) rotate(-45deg);
  }
}
.menu {
  @extend %goo;
  $width: 380px;
  $height: 250px;
  position: absolute;
  left: 50%;
  margin-left: -$width/2;
  padding-top: 20px;
  padding-left: $width/2;
  width: $width;
  height: $height;
  box-sizing: border-box;
  font-size: 20px;
  text-align: left;
}

.menu-item {
  &:hover {
    background: white;
    color: $fg;
  }
  @for $i from 1 through $menu-items {
    &:nth-child(#{$i + 2}) {
      transition-duration: 10ms+ (60ms * ($i));
    }
  }
}

.menu-open-button {
  @extend %ball;
  z-index: 2;
  transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);
  transition-duration: 400ms;
  transform: scale(1.1, 1.1) translate3d(0, 0, 0);
  cursor: pointer;
}
.menu-open-button:hover {
  transform: scale(1.2, 1.2) translate3d(0, 0, 0);
}
.menu-open:checked + .menu-open-button {
  transition-timing-function: linear;
  transition-duration: 200ms;
  transform: scale(0.8, 0.8) translate3d(0, 0, 0);
}

.menu-open:checked ~ .menu-item {
  transition-timing-function: cubic-bezier(0.935, 0, 0.34, 1.33);
  @for $i from 1 through $menu-items {
    $angle: (($pi - $opening-angle)/2)+
      (($opening-angle/($menu-items - 1)) * ($i - 1));

    &:nth-child(#{$i + 2}) {
      transition-duration: 80ms+ (80ms * $i);
      transform: translate3d(
        cos($angle) * $open-distance,
        sin($angle) * $open-distance,
        0
      );
    }
  }
}
